?stats
library(oneway)
library(oneway)
?summary
library(oneway)
library(oneway)
library(oneway)
library(oneway)
example("oneway")
plot(mileage)
mileage
summary(mileage)
library(broom)
tidy(mileage$anova)
glimpse(mileage$anova)
?tidy
glance(mileage$anova)
as.data.frame(glance(mileage$anova))
library(oneway)
fit <- oneway(disp ~ gear)
fit <- oneway(disp ~ gear, mtcars)
fit
summary(fit)
plot(fit)
library(oneway)
plot(fit)
?plot.oneway
?TukeyHSD
library(oneway)
fit <- oneway(mpg ~ cyl, mtcars)
plot(fit)
print(fit)
posthoc(fit)
class(fit)
posthoc.oneway
posthoc.oneway(fit)
?posthoc.oneway
library(oneway)
fit
posthoc(fit)
?TukeyHSD
fit$anova
aov(fit$anova)
library(oneway)
TukeyHSD(fit$anova)
TukeyHSD(aov(fit$anova))
library(oneway)
fit <- oneway(mpg ~ cyl, mtcars)
fit
plot(fit)
summary(fit)
TukeyHSD(aov(fit$anova))
posthoc(fit)
aov(fit$anova)
summary(aov(fit$anova))
broom::tidy(summary(aov(fit$anova)))
broom::tidy(aov(fit$anova))
fit <- oneway(hp ~ gear, mtcars)
plot(fit)
posthoc(fit)
fit <- oneway(hp ~ carb, mtcars)
fit
posthoc(fit)
fit
plot(fit)
?aov
x <- aov(mpg ~ gear, mtcars)
names(x)
x$model
aov
x
summary(x)
names(x)
broom::tidy(x)
as.data.frame(broom::tidy(x))
summary(x)
library(oneway)
?oneway
library(oneway)
?oneway
library(oneway)
?oneway
library(oneway)
?oneway
library(oneway)
?oneway
library(oneway)
library(oneway)
?oneway
library(usethis)
?use_vignette
use_vignette("oneway", "Intro to the oneway package")
library(pkgdown)
build_site
build_site()
?invisible
library(oneway)
example(posthoc)
library(oneway)
assumptions(mileage)
qqPlot(mileage$anova)
library(car)
qqPlot(mileage$anova)
mileage$anova
?qqPlot
class(mileage$anova)
x <- mileage$anova
qqPlot(x)
x
x <- lm(mpg ~ factor(cyl), mtcars)
class(x)
qqPlot(x)
y <- mileage$anova
library(oneway)
summary(mileage$anova)
assumptions
assumptions(mileage)
mileage$anova$formula
x$formula
y$formula
names(mileage)
x <- mileage$anova
names(x)
x$call
plot(mileage$anova)
summary(lm(hp ~ wt, mtcars))
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=hp)) +
geom_point() + geom_smooth(se=FALSE)
ggplot(mtcars, aes(x=wt, y=hp)) +
geom_point() + geom_smooth(se=FALSE, method="lm")
?mtcars
ggplot(mtcars, aes(x=wt, y=hp)) +
geom_point() + geom_smooth(se=FALSE, method="lm") +
labs(x= "Weight (1000 lbs)",
y = "Gross Horsepower")
library(caret)
x <- lm(hp ~ wt, mtcars)
postResample(x$fitted, x$hp)
x$fitted.values
postResample(x$fitted.values, x$hp)
x$hp
postResample(x$fitted.values, mtcars$hp)
cor(mtcars$hp, mtcars$wt)
title="Relationship between Horsepower and Car Weigth"")
ggplot(mtcars, aes(x=wt, y=hp)) +
geom_point() + geom_smooth(se=FALSE, method="lm") +
labs(x= "Weight (1000 lbs)",
y = "Gross Horsepower",
title="Relationship between Horsepower and Car Weigth")
library(dplyr)
summarise_groups <- function(dataframe, grouping_var, column_name){
grouping_var <- enquo(grouping_var)
column_name <- enquo(column_name)
dataframe %>%
group_by(!!grouping_var) %>%
summarise(!!mean_name := mean(!!column_name, na.rm = TRUE))
}
summarise_groups(mtcars, cyl, mpg)
stats_by <- function(data, by, var){
require(dplyr)
by <- enquo(by)
var <- enquo(var)
mean_name <- paste0("mean_", as_label(var))
sd_name <- paste0("sd_", as_label(var))
data %>%  group_by(!!by) %>%
summarize(n=n(),
!!mean_name := mean(!!var),
!!sd_name   := sd(!!var))
}
stats_by(mtcars, cyl, mpg )
summarise_groups <- function(dataframe, grouping_var, column_name){
grouping_var <- enquo(grouping_var)
column_name <- enquo(column_name)
mean_name <- paste0("mean_", as_label(column_name))
dataframe %>%
group_by(!!grouping_var) %>%
summarise(!!mean_name := mean(!!column_name, na.rm = TRUE))
}
summarise_groups(mtcars, cyl, wt)
summarise_groups <- function(dataframe, grouping_var, column_name){
dataframe %>%
group_by({{grouping_var}}) %>%
summarise({{column_name}} := mean({{column_name}}, na.rm = TRUE))
}
summarise_groups(mtcars, cyl, mpg)
citation(ggplot2)
library(ggplot2)
citation(ggplot2)
citation("ggplot2")
library(oneway)
library(pkgdown)
build_site()
library(testthat)
library(usethis)
use_vignette("oneway")
build_site()
library(ggplot2)
cars <- mpg[c("hwy", "class", "year")]
View(cars)
use_data(cars)
library(oneway)
?cars
build_site()
fit <- oneway(mpg ~ carb, mtcars)
fit
library(dplyr)
library(dplyr)
mtcars %>%
group_by(cyl) %>%
summarise(n = n(),
mean = mean(mpg),
sd = sd(mpg))
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]]))
}
mystats(mtcars, g="cyl", y="mpg")
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(data$group) %>%
summarise(n = n(),
mean = mean(data$y),
sd = sd(data$y))
}
mystats(mtcars, g="cyl", y="mpg")
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]]))
}
mystats(mtcars, g="cyl", y="mpg")
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats(mtcars, g="cyl", y="mpg")
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame(, row.name=FALSE)
}
mystats(mtcars, g="cyl", y="mpg")
mystats <- function(data, group, y) {
require(dplyr)
group <- enquo(group)
y <- enquo(y)
data %>%
group_by(!!group) %>%
summarise(n = n(),
mean = mean(!!y),
sd = sd(!!y)) %>%
as.data.frame()
}
mystats(mtcars, g=cyl, y=mpg)
x <- as.formula(mpg ~ cyl)
x
x[[1]]
x[[2]]
x[[3]]
mystats <- function(formula, data) {
require(dplyr)
group <- as.character(formula[[3]])
y <- as.character(formula[[2]])
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats(mpg~cyl, mtcars)
library(oneway)
fit <- oneway(mpg ~ cyl, mtcars)
fit
library(crayon)
red$bold$underline("Summary Statistics")
library(oneway)
fit
library(oneway)
fit
library(tidyverse)
?dplyr
library(dplyr)
?dplyr
library(usethis)
?use_package
library(usethis)
use_package("dplyr", type="Imports")
use_package("ggplot2", type="Imports")
library(oneway)
fit <- oneway(mpg ~ cyl, mtcars)
fit
summary(fit)
plot(fit)
library(oneway)
plot(fit)
library(oneway)
plot(fit)
library(oneway)
plot(fit)
library(oneway)
plot(fit)
plot.oneway <- function(x, ...){
if(!inherits(x, "oneway"))
stop("Must be class 'oneway")
g <- as.character(x$anova$terms[[3]])
y <- as.character(x$anova$terms[[2]])
ggplot(x$anova$model,
aes(x=factor(.data[[g]]), y=.data[[y]])) +
geom_boxplot(...) +
labs(x=g)
}
library(oneway)
rm(plot.oneway)
fit(oneway())
plot(fit)
names(fit)
names(fit$anova)
fit$anova$model
fit$anova$terms
fit$anoav$terms[[1]]
fit$anoav$terms[[2]]
fit$anova$terms[[1]]
fit$anova$terms[[2]]
fit$anova$terms[[3]]
library(oneway)
plot(fit)
library(oneway)
plot(fit)
library(oneway)
plot(fit)
library(oneway)
plot(fit, fill="skyblue")
library(oneway)
plot(fit, fill="blue")
plot(fit, aes(fill=mtcars$cyl))
library(oneway)
plot(fit)
library(oneway)
plot(fit)
library(oneway)
plot(fit)
library(oneway)
plot(fit)
library(pkgdown)
build_site()
## Create a Box-Plot
g <- factor(fit$anova$model[[2]])
y <- fit$anova$model[[1]]
med <- tapply(y, g, median)
library(oneway)
mtcars$cyl <- factor(mtcars$cyl)
fit <- oneway(mpg ~ cyl, data=mtcars)
library(dplyr)
library(oneway)
mtcars$cyl <- factor(mtcars$cyl)
fit <- oneway(mpg ~ cyl, data=mtcars)
## Create a Box-Plot
g <- factor(fit$anova$model[[2]])
y <- fit$anova$model[[1]]
med <- tapply(y, g, median)
y <- y-med[g]
fligner_plot <- ggplot(fit$anova$model, aes(x=g, y=y)) +
geom_boxplot() +
ggtitle("Homogeneity of Variance") +
xlab(as.character(fit$anova$terms[[3]])) +
ylab(as.character(fit$anova$terms[[2]]))
library(ggplot2)
fligner_plot <- ggplot(fit$anova$model, aes(x=g, y=y)) +
geom_boxplot() +
ggtitle("Homogeneity of Variance") +
xlab(as.character(fit$anova$terms[[3]])) +
ylab(as.character(fit$anova$terms[[2]]))
assumptions <- function(fit){
## checking if the input is oneway class
if(!inherits(fit, "oneway"))
stop("Must be class 'oneway")
##Conduct "Shapiro-Wilk" Test for Normality.
result_normality <- shapiro.test(fit$anova$model[[1]])
result_normality <- result_normality[-3]
result_normality$data.name <- as.character(fit$anova$terms[[2]])
result_normality <- as_tibble(result_normality)
##Create Q-Q plot of residuals
text1 <- "Normal Q-Q Plot"
text2 <- as.character(fit$anova$terms[[2]])
text3 <- "by"
text4 <- paste(text3, text2, sep = " ")
label <- paste(text1, text4, sep = "\n")
library(ggplot2)
p <- ggplot(fit$anova$model, aes(sample = fit$anova$model[[1]]))
qqplot <- p+
stat_qq()+
stat_qq_line()+
ggtitle(label)
## Conduct "Flinger" Test for Equal Variance.
y <- fit$anova$model[[1]]
x <- fit$anova$model[[2]]
data <- fit$anova$model
library(stats)
fligner_result <- fligner.test(formula = y~x, data = data)
fligner_result <- fligner_result[-4]
fligner_result$data.name <- paste(fit$anova$terms[[2]], fit$anova$terms[[1]],fit$anova$terms[[3]],sep="")
fligner_result <- as_tibble(fligner_result)
## Create a Box-Plot
g <- factor(fit$anova$model[[2]])
y <- fit$anova$model[[1]]
med <- tapply(y, g, median)
y <- y-med[g]
fligner_plot <- ggplot(fit$anova$model, aes(x=g, y=y)) +
geom_boxplot() +
ggtitle("Homogeneity of Variance") +
xlab(as.character(fit$anova$terms[[3]])) +
ylab(as.character(fit$anova$terms[[2]]))
## Printing the Assumption
cat("\n\033[94m\033[1m\033[4m       Normality Testing       \033[24m\033[22m\033[39m\n")
print(result_normality)
cat("===============================\n")
cat("\n\033[94m\033[1m\033[4m    Equal Variance Testing     \033[24m\033[22m\033[39m\n")
print(fligner_result)
qqplot + fligner_plot
}
assumptions(fit)
library(ggplot2)
p <- ggplot(fit$anova$model, aes(sample = fit$anova$model[[1]]))
qqplot <- p+
stat_qq()+
stat_qq_line()+
ggtitle(label)
label <- paste(text1, text4, sep = "\n")
text1 <- "Normal Q-Q Plot"
text2 <- as.character(fit$anova$terms[[2]])
text3 <- "by"
text4 <- paste(text3, text2, sep = " ")
label <- paste(text1, text4, sep = "\n")
library(ggplot2)
p <- ggplot(fit$anova$model, aes(sample = fit$anova$model[[1]]))
qqplot <- p+
stat_qq()+
stat_qq_line()+
ggtitle(label)
qqplot + fligner_plot
library(patchwork)
qqplot + fligner_plot
assumptions <- function(fit){
## checking if the input is oneway class
if(!inherits(fit, "oneway"))
stop("Must be class 'oneway")
##Conduct "Shapiro-Wilk" Test for Normality.
result_normality <- shapiro.test(fit$anova$model[[1]])
result_normality <- result_normality[-3]
result_normality$data.name <- as.character(fit$anova$terms[[2]])
result_normality <- as_tibble(result_normality)
##Create Q-Q plot of residuals
text1 <- "Normal Q-Q Plot"
text2 <- as.character(fit$anova$terms[[2]])
text3 <- "by"
text4 <- paste(text3, text2, sep = " ")
label <- paste(text1, text4, sep = "\n")
library(ggplot2)
p <- ggplot(fit$anova$model, aes(sample = fit$anova$model[[1]]))
qqplot <- p+
stat_qq()+
stat_qq_line()+
ggtitle(label)
## Conduct "Flinger" Test for Equal Variance.
y <- fit$anova$model[[1]]
x <- fit$anova$model[[2]]
data <- fit$anova$model
library(stats)
fligner_result <- fligner.test(formula = y~x, data = data)
fligner_result <- fligner_result[-4]
fligner_result$data.name <- paste(fit$anova$terms[[2]], fit$anova$terms[[1]],fit$anova$terms[[3]],sep="")
fligner_result <- as_tibble(fligner_result)
## Create a Box-Plot
g <- factor(fit$anova$model[[2]])
y <- fit$anova$model[[1]]
med <- tapply(y, g, median)
y <- y-med[g]
fligner_plot <- ggplot(fit$anova$model, aes(x=g, y=y)) +
geom_boxplot() +
ggtitle("Homogeneity of Variance") +
xlab(as.character(fit$anova$terms[[3]])) +
ylab(as.character(fit$anova$terms[[2]]))
## Printing the Assumption
cat("\n\033[94m\033[1m\033[4m       Normality Testing       \033[24m\033[22m\033[39m\n")
print(result_normality)
cat("===============================\n")
cat("\n\033[94m\033[1m\033[4m    Equal Variance Testing     \033[24m\033[22m\033[39m\n")
print(fligner_result)
library(patchwork)
qqplot + fligner_plot +
plot_annotation(title = 'Testing of Assumptions')
}
assumptions(fit)
